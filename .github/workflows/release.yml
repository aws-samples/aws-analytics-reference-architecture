name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "Automation"
          git config user.email "github-actions@github.com"
      - name: Setup Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu' # OpenJDK
          java-version: '11'
      - name: Install dependencies
        run: cd core && yarn install --check-files --frozen-lockfile
      - name: release
        run: cd core && npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::"$(git ls-remote origin -h ${{
          github.ref }} | cut -f1)"
      - name: Upload artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: core/dist
    container:
      image: jsii/superchain:1-buster-slim-node14
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: core/dist
      - name: Release
        run: errout=$(mktemp); cd core && gh release create $(cat dist/releasetag.txt) -R
          $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt)
          --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode
          -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then
          cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
  release_npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: core/dist
      - name: Release
        run: cd core && npx -p jsii-release@latest jsii-release-npm
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: registry.npmjs.org
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    container:
      image: jsii/superchain:1-buster-slim-node14
  release_pypi:
    name: Publish to PyPI
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: core/dist
      - name: Release
        run: cd core && npx -p jsii-release@latest jsii-release-pypi
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
    container:
      image: jsii/superchain:1-buster-slim-node14
  slack:
    name: Publish to slack channel
    needs: 
      - release_npm
      - release_pypi
      - release_github
    runs-on: ubuntu-latest
    steps:
      - name: publish latest release
        env:
          SLACK_URL: ${{ secrets.SLACK_URL }}
        run: |
          curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/aws-samples/aws-analytics-reference-architecture/releases/latest > release.json
          VERSION=$( jq -r '.name' release.json )
          CONTENT=$( jq -r '.body' release.json )
          jq -n --arg version "$VERSION" --arg content "$CONTENT" '{"release-version": $version, "release-content": $content}' > body.json
          curl --location --request POST $SLACK_URL \
          --header 'Content-Type: application/json' --data @body.json
