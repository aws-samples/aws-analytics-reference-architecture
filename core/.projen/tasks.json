{
  "tasks": {
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word --no-fix-peer-dependencies"
        },
        {
          "spawn": "docgen"
        }
      ]
    },
    "test:compile": {
      "name": "test:compile",
      "description": "compiles the test code",
      "steps": [
        {
          "exec": "tsc --noEmit --project tsconfig.jest.json"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "rm -fr lib/"
        },
        {
          "spawn": "test:compile"
        },
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot"
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "build": {
      "name": "build",
      "description": "Full release build (test+compile)",
      "steps": [
        {
          "exec": "npx projen"
        },
        {
          "exec": "npx projen bundle"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "description": "Update jest snapshots",
      "steps": [
        {
          "exec": "jest --updateSnapshot"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt"
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt"
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "publish:github": {
      "name": "publish:github",
      "description": "Publish this package to GitHub Releases",
      "requiredEnv": [
        "GITHUB_TOKEN",
        "GITHUB_REPOSITORY",
        "GITHUB_REF"
      ],
      "steps": [
        {
          "exec": "errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \"Release.tag_name already exists\" $errout; then cat $errout; exit $exitcode; fi"
        }
      ]
    },
    "default": {
      "name": "default",
      "steps": [
        {
          "exec": "node .projenrc.js"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word --no-fix-peer-dependencies"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Create an npm tarball",
      "steps": [
        {
          "exec": "jsii-pacmak"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js"
        }
      ]
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "publish:npm": {
      "name": "publish:npm",
      "description": "Publish this package to npm",
      "env": {
        "NPM_DIST_TAG": "latest",
        "NPM_REGISTRY": "registry.npmjs.org"
      },
      "requiredEnv": [
        "NPM_TOKEN"
      ],
      "steps": [
        {
          "exec": "npx -p jsii-release@latest jsii-release-npm"
        }
      ]
    },
    "publish:pypi": {
      "name": "publish:pypi",
      "description": "Publish this package to PyPI",
      "requiredEnv": [
        "TWINE_USERNAME",
        "TWINE_PASSWORD"
      ],
      "steps": [
        {
          "exec": "npx -p jsii-release@latest jsii-release-pypi"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen"
        }
      ]
    },
    "test:deploy": {
      "name": "test:deploy",
      "steps": [
        {
          "exec": "npx projen build"
        },
        {
          "exec": "cdk deploy --app=./lib/integ.default.js"
        }
      ]
    },
    "test:destroy": {
      "name": "test:destroy",
      "steps": [
        {
          "exec": "cdk destroy --app=./lib/integ.default.js"
        }
      ]
    },
    "bundle": {
      "name": "bundle",
      "description": "Bundle all lambda functions",
      "steps": [
        {
          "spawn": "bundle:data-generator-setup"
        },
        {
          "spawn": "bundle:synchronous-athena-query"
        },
        {
          "spawn": "bundle:synchronous-crawler"
        }
      ],
      "cwd": "resources/lambdas"
    },
    "bundle:data-generator-setup": {
      "name": "bundle:data-generator-setup",
      "description": "Install dependency and package Python file into for Lambda function:data-generator-setup",
      "steps": [
        {
          "exec": "rm -rf data-generator-setup.zip"
        },
        {
          "exec": "rm -rf build/data-generator-setup"
        },
        {
          "exec": "cp -r data-generator-setup build/"
        },
        {
          "exec": "[ -f build/data-generator-setup/requirements.txt ] && docker run -v $PWD/build/data-generator-setup:/var/task \"public.ecr.aws/sam/build-python3.8\" /bin/sh -c \"pip install -r requirements.txt -t ./; exit\""
        },
        {
          "exec": "cd build/data-generator-setup && zip -q -r ../../data-generator-setup.zip ."
        }
      ],
      "cwd": "resources/lambdas"
    },
    "bundle:synchronous-athena-query": {
      "name": "bundle:synchronous-athena-query",
      "description": "Install dependency and package Python file into for Lambda function:synchronous-athena-query",
      "steps": [
        {
          "exec": "rm -rf synchronous-athena-query.zip"
        },
        {
          "exec": "rm -rf build/synchronous-athena-query"
        },
        {
          "exec": "cp -r synchronous-athena-query build/"
        },
        {
          "exec": "[ -f build/synchronous-athena-query/requirements.txt ] && docker run -v $PWD/build/synchronous-athena-query:/var/task \"public.ecr.aws/sam/build-python3.8\" /bin/sh -c \"pip install -r requirements.txt -t ./; exit\""
        },
        {
          "exec": "cd build/synchronous-athena-query && zip -q -r ../../synchronous-athena-query.zip ."
        }
      ],
      "cwd": "resources/lambdas"
    },
    "bundle:synchronous-crawler": {
      "name": "bundle:synchronous-crawler",
      "description": "Install dependency and package Python file into for Lambda function:synchronous-crawler",
      "steps": [
        {
          "exec": "rm -rf synchronous-crawler.zip"
        },
        {
          "exec": "rm -rf build/synchronous-crawler"
        },
        {
          "exec": "cp -r synchronous-crawler build/"
        },
        {
          "exec": "[ -f build/synchronous-crawler/requirements.txt ] && docker run -v $PWD/build/synchronous-crawler:/var/task \"public.ecr.aws/sam/build-python3.8\" /bin/sh -c \"pip install -r requirements.txt -t ./; exit\""
        },
        {
          "exec": "cd build/synchronous-crawler && zip -q -r ../../synchronous-crawler.zip ."
        }
      ],
      "cwd": "resources/lambdas"
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
