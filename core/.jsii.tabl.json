{"version":"2","toolVersion":"5.1.12","snippets":{"774e78c7567124a247fad1acf1742ce7d0226c9ce52ac25e17c1882600c862d2":{"translations":{"python":{"source":"import aws_cdk as cdk\nfrom aws_analytics_reference_architecture import AraBucket\n\nexample_app = cdk.App()\nstack = cdk.Stack(example_app, \"AraBucketStack\")\n\nAraBucket(stack,\n    bucket_name=\"test-bucket\",\n    server_access_logs_prefix=\"test-bucket\"\n)","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Aws.Analytics.Reference.Architecture;\n\nvar exampleApp = new App();\nvar stack = new Stack(exampleApp, \"AraBucketStack\");\n\nnew AraBucket(stack, new Struct {\n    BucketName = \"test-bucket\",\n    ServerAccessLogsPrefix = \"test-bucket\"\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.*;\nimport aws.analytics.reference.architecture.AraBucket;\n\nApp exampleApp = new App();\nStack stack = new Stack(exampleApp, \"AraBucketStack\");\n\nAraBucket.Builder.create(stack)\n        .bucketName(\"test-bucket\")\n        .serverAccessLogsPrefix(\"test-bucket\")\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws-samples/dummy/awsanalyticsreferencearchitecture\"\n\nexampleApp := cdk.NewApp()\nstack := cdk.NewStack(exampleApp, jsii.String(\"AraBucketStack\"))\n\nawsanalyticsreferencearchitecture.NewAraBucket(stack, map[string]*string{\n\t\"bucketName\": jsii.String(\"test-bucket\"),\n\t\"serverAccessLogsPrefix\": jsii.String(\"test-bucket\"),\n})","version":"1"},"$":{"source":"import * as cdk from 'aws-cdk-lib';\nimport { AraBucket } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new cdk.App();\nconst stack = new cdk.Stack(exampleApp, 'AraBucketStack');\n\nnew AraBucket(stack, {\n bucketName: 'test-bucket',\n serverAccessLogsPrefix: 'test-bucket',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.AraBucket"},"field":{"field":"markdown","line":16}},"didCompile":false,"fqnsReferenced":["aws-analytics-reference-architecture.AraBucket","aws-cdk-lib.App","aws-cdk-lib.Stack","constructs.Construct"],"fullSource":"import * as cdk from 'aws-cdk-lib';\nimport { AraBucket } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new cdk.App();\nconst stack = new cdk.Stack(exampleApp, 'AraBucketStack');\n\nnew AraBucket(stack, {\n bucketName: 'test-bucket',\n serverAccessLogsPrefix: 'test-bucket',\n});","syntaxKindCounter":{"11":5,"80":13,"209":1,"210":2,"213":3,"242":2,"243":1,"259":2,"260":2,"271":2,"272":2,"273":1,"274":1,"275":1,"302":2,"311":1},"fqnsFingerprint":"d7e95933070a673da2110c4697db0f097de3ef3f9113fe1c7713536746f1d224"},"64062db6342b782b268925fb249e0a6a262c4012af1b61bcf560b98fb27fa3a8":{"translations":{"python":{"source":"my_bucket = Bucket(stack, \"MyBucket\")\n\nmy_props = {\n    \"sink_bucket\": my_bucket,\n    \"sink_object_key\": \"some-prefix\",\n    \"output_file_max_size_in_bytes\": 10000000\n}\n\nBatchReplayer(stack, \"WebSalesReplayer\",\n    dataset=PreparedDataset.RETAIL_1_GB_WEB_SALE,\n    s3_props=my_props,\n    frequency=120\n)","version":"2"},"csharp":{"source":"var myBucket = new Bucket(stack, \"MyBucket\");\n\nvar myProps = new Dictionary<string, object> {\n    { \"sinkBucket\", myBucket },\n    { \"sinkObjectKey\", \"some-prefix\" },\n    { \"outputFileMaxSizeInBytes\", 10000000 }\n};\n\nnew BatchReplayer(stack, \"WebSalesReplayer\", new Struct {\n    Dataset = PreparedDataset.RETAIL_1_GB_WEB_SALE,\n    S3Props = myProps,\n    Frequency = 120\n});","version":"1"},"java":{"source":"Object myBucket = new Bucket(stack, \"MyBucket\");\n\nS3Sink myProps = Map.of(\n        \"sinkBucket\", myBucket,\n        \"sinkObjectKey\", \"some-prefix\",\n        \"outputFileMaxSizeInBytes\", 10000000);\n\nBatchReplayer.Builder.create(stack, \"WebSalesReplayer\")\n        .dataset(PreparedDataset.getRETAIL_1_GB_WEB_SALE())\n        .s3Props(myProps)\n        .frequency(120)\n        .build();","version":"1"},"go":{"source":"myBucket := NewBucket(stack, jsii.String(\"MyBucket\"))\n\nmyProps := map[string]interface{}{\n\t\"sinkBucket\": myBucket,\n\t\"sinkObjectKey\": jsii.String(\"some-prefix\"),\n\t\"outputFileMaxSizeInBytes\": jsii.Number(10000000),\n}\n\nNewBatchReplayer(stack, jsii.String(\"WebSalesReplayer\"), map[string]interface{}{\n\t\"dataset\": PreparedDataset_RETAIL_1_GB_WEB_SALE,\n\t\"s3Props\": myProps,\n\t\"frequency\": jsii.Number(120),\n})","version":"1"},"$":{"source":"\nconst myBucket = new Bucket(stack, \"MyBucket\")\n\nlet myProps: S3Sink = {\n sinkBucket: myBucket,\n sinkObjectKey: 'some-prefix',\n outputFileMaxSizeInBytes: 10000000,\n}\n\nnew BatchReplayer(stack, \"WebSalesReplayer\", {\n  dataset: PreparedDataset.RETAIL_1_GB_WEB_SALE,\n  s3Props: myProps,\n  frequency: 120,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.BatchReplayer"},"field":{"field":"markdown","line":12}},"didCompile":false,"fqnsReferenced":[],"fullSource":"\nconst myBucket = new Bucket(stack, \"MyBucket\")\n\nlet myProps: S3Sink = {\n sinkBucket: myBucket,\n sinkObjectKey: 'some-prefix',\n outputFileMaxSizeInBytes: 10000000,\n}\n\nnew BatchReplayer(stack, \"WebSalesReplayer\", {\n  dataset: PreparedDataset.RETAIL_1_GB_WEB_SALE,\n  s3Props: myProps,\n  frequency: 120,\n});","syntaxKindCounter":{"9":2,"11":3,"80":17,"182":1,"209":2,"210":1,"213":2,"242":2,"243":1,"259":2,"260":2,"302":6,"311":1},"fqnsFingerprint":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"d9c6a55d5ee675fd44afe105bfef4a45eaa91942288506ac886e356f7cced6dc":{"translations":{"python":{"source":"CdkDeployer(AwsNativeRefArchApp, \"AwsNativeRefArchDeployer\",\n    github_repository=\"aws-samples/aws-analytics-reference-architecture\",\n    cdk_app_location=\"refarch/aws-native\",\n    cdk_parameters={\n        \"QuickSightUsername\": {\n            \"default\": \"myuser\",\n            \"type\": \"String\"\n        },\n        \"QuickSightIdentityRegion\": {\n            \"default\": \"us-east-1\",\n            \"type\": \"String\"\n        }\n    }\n)","version":"2"},"csharp":{"source":"new CdkDeployer(AwsNativeRefArchApp, \"AwsNativeRefArchDeployer\", new Struct {\n    GithubRepository = \"aws-samples/aws-analytics-reference-architecture\",\n    CdkAppLocation = \"refarch/aws-native\",\n    CdkParameters = new Struct {\n        QuickSightUsername = new Struct {\n            Default = \"myuser\",\n            Type = \"String\"\n        },\n        QuickSightIdentityRegion = new Struct {\n            Default = \"us-east-1\",\n            Type = \"String\"\n        }\n    }\n});","version":"1"},"java":{"source":"CdkDeployer.Builder.create(AwsNativeRefArchApp, \"AwsNativeRefArchDeployer\")\n        .githubRepository(\"aws-samples/aws-analytics-reference-architecture\")\n        .cdkAppLocation(\"refarch/aws-native\")\n        .cdkParameters(Map.of(\n                \"QuickSightUsername\", Map.of(\n                        \"default\", \"myuser\",\n                        \"type\", \"String\"),\n                \"QuickSightIdentityRegion\", Map.of(\n                        \"default\", \"us-east-1\",\n                        \"type\", \"String\")))\n        .build();","version":"1"},"go":{"source":"NewCdkDeployer(awsNativeRefArchApp, jsii.String(\"AwsNativeRefArchDeployer\"), map[string]interface{}{\n\t\"githubRepository\": jsii.String(\"aws-samples/aws-analytics-reference-architecture\"),\n\t\"cdkAppLocation\": jsii.String(\"refarch/aws-native\"),\n\t\"cdkParameters\": map[string]map[string]*string{\n\t\t\"QuickSightUsername\": map[string]*string{\n\t\t\t\"default\": jsii.String(\"myuser\"),\n\t\t\t\"type\": jsii.String(\"String\"),\n\t\t},\n\t\t\"QuickSightIdentityRegion\": map[string]*string{\n\t\t\t\"default\": jsii.String(\"us-east-1\"),\n\t\t\t\"type\": jsii.String(\"String\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"new CdkDeployer(AwsNativeRefArchApp, 'AwsNativeRefArchDeployer', {\n githubRepository: 'aws-samples/aws-analytics-reference-architecture',\n cdkAppLocation: 'refarch/aws-native',\n cdkParameters: {\n   QuickSightUsername: {\n     default: 'myuser',\n     type: 'String',\n   },\n   QuickSightIdentityRegion: {\n     default: 'us-east-1',\n     type: 'String',\n   },\n },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.CdkDeployer"},"field":{"field":"markdown","line":15}},"didCompile":false,"fqnsReferenced":[],"fullSource":"new CdkDeployer(AwsNativeRefArchApp, 'AwsNativeRefArchDeployer', {\n githubRepository: 'aws-samples/aws-analytics-reference-architecture',\n cdkAppLocation: 'refarch/aws-native',\n cdkParameters: {\n   QuickSightUsername: {\n     default: 'myuser',\n     type: 'String',\n   },\n   QuickSightIdentityRegion: {\n     default: 'us-east-1',\n     type: 'String',\n   },\n },\n});","syntaxKindCounter":{"11":7,"80":11,"209":4,"213":1,"243":1,"302":9,"311":1},"fqnsFingerprint":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"fef12336ed0199ceb04f623634da97a75fc965bbe2ae212f784acb2e719749cf":{"translations":{"python":{"source":"from aws_analytics_reference_architecture import LfTag\nfrom aws_cdk import App, Stack\nfrom aws_cdk.aws_iam import Role\nfrom aws_analytics_reference_architecture import CentralGovernance, LfTag\n\nexample_app = App()\nstack = Stack(example_app, \"CentralGovStack\")\n\ntags = [LfTag(key=\"tag1\", values=[\"LfTagValue1\", \"LfTagValue2\"])]\ngovernance = CentralGovernance(stack, \"myCentralGov\", tags=tags)\n\ngovernance.register_data_domain(\"Domain1\", \"domain1Name\", <DOMAIN_CONFIG_SECRET_ARN>)","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Amazon.CDK.AWS.IAM;\nusing Aws.Analytics.Reference.Architecture;\n\nvar exampleApp = new App();\nvar stack = new Stack(exampleApp, \"CentralGovStack\");\n\nvar tags = new [] { new LfTag { Key = \"tag1\", Values = new [] { \"LfTagValue1\", \"LfTagValue2\" } } };\nvar governance = new CentralGovernance(stack, \"myCentralGov\", new CentralGovernanceProps { Tags = tags });\n\ngovernance.RegisterDataDomain(\"Domain1\", \"domain1Name\", <DOMAIN_CONFIG_SECRET_ARN>);","version":"1"},"java":{"source":"import software.amazon.awscdk.App;\nimport software.amazon.awscdk.Stack;\nimport software.amazon.awscdk.services.iam.Role;\nimport aws.analytics.reference.architecture.CentralGovernance;\nimport aws.analytics.reference.architecture.LfTag;\n\nApp exampleApp = new App();\nStack stack = new Stack(exampleApp, \"CentralGovStack\");\n\nLfTag[] tags = List.of(LfTag.builder().key(\"tag1\").values(List.of(\"LfTagValue1\", \"LfTagValue2\")).build());\nCentralGovernance governance = CentralGovernance.Builder.create(stack, \"myCentralGov\").tags(tags).build();\n\ngovernance.registerDataDomain(\"Domain1\", \"domain1Name\", <DOMAIN_CONFIG_SECRET_ARN>);","version":"1"},"go":{"source":"import \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws-samples/dummy/awsanalyticsreferencearchitecture\"\n\nexampleApp := awscdk.NewApp()\nstack := awscdk.NewStack(exampleApp, jsii.String(\"CentralGovStack\"))\n\ntags := []lfTag{\n\t&lfTag{\n\t\tKey: jsii.String(\"tag1\"),\n\t\tValues: []*string{\n\t\t\tjsii.String(\"LfTagValue1\"),\n\t\t\tjsii.String(\"LfTagValue2\"),\n\t\t},\n\t},\n}\ngovernance := awsanalyticsreferencearchitecture.NewCentralGovernance(stack, jsii.String(\"myCentralGov\"), &CentralGovernanceProps{\n\tTags: Tags,\n})\n\ngovernance.RegisterDataDomain(jsii.String(\"Domain1\"), jsii.String(\"domain1Name\"), <DOMAIN_CONFIG_SECRET_ARN>)","version":"1"},"$":{"source":"import { App, Stack } from 'aws-cdk-lib';\nimport { Role } from 'aws-cdk-lib/aws-iam';\nimport { CentralGovernance, LfTag } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new App();\nconst stack = new Stack(exampleApp, 'CentralGovStack');\n\nconst tags: LfTag[] = [{key: 'tag1': values:['LfTagValue1', 'LfTagValue2']}]\nconst governance = new CentralGovernance(stack, 'myCentralGov', { tags });\n\ngovernance.registerDataDomain('Domain1', 'domain1Name', <DOMAIN_CONFIG_SECRET_ARN>);","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.CentralGovernance"},"field":{"field":"markdown","line":15}},"didCompile":false,"fqnsReferenced":["aws-analytics-reference-architecture.CentralGovernance","aws-analytics-reference-architecture.CentralGovernance#registerDataDomain","aws-analytics-reference-architecture.CentralGovernanceProps","aws-cdk-lib.App","aws-cdk-lib.Stack","constructs.Construct"],"fullSource":"import { App, Stack } from 'aws-cdk-lib';\nimport { Role } from 'aws-cdk-lib/aws-iam';\nimport { CentralGovernance, LfTag } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new App();\nconst stack = new Stack(exampleApp, 'CentralGovStack');\n\nconst tags: LfTag[] = [{key: 'tag1': values:['LfTagValue1', 'LfTagValue2']}]\nconst governance = new CentralGovernance(stack, 'myCentralGov', { tags });\n\ngovernance.registerDataDomain('Domain1', 'domain1Name', <DOMAIN_CONFIG_SECRET_ARN>);","syntaxKindCounter":{"11":10,"80":22,"182":2,"187":1,"208":2,"209":2,"210":1,"212":1,"213":3,"215":1,"242":4,"243":1,"259":4,"260":4,"271":3,"272":3,"274":3,"275":5,"302":2,"303":1,"311":1},"fqnsFingerprint":"31dc8e7b387d10b4442a38cc1b8d8e073d4f923c927db3456ff61f5a21fd50c3"},"1019d9f5466a4c1146b09c5539e6fa3ca1cfac874619117fe42a128ef454f333":{"translations":{"python":{"source":"from ..data_generator.custom_dataset import CustomDataset, CustomDatasetInputFormat\n\napp = App()\nstack = Stack(app, \"CustomDatasetStack\")\n\ncustom = CustomDataset(stack, \"CustomDataset\",\n    s3_location={\n        \"bucket_name\": \"aws-analytics-reference-architecture\",\n        \"object_key\": \"datasets/custom\"\n    },\n    input_format=CustomDatasetInputFormat.CSV,\n    datetime_column=\"tpep_pickup_datetime\",\n    datetime_columns_to_adjust=[\"tpep_pickup_datetime\"],\n    partition_range=Duration.minutes(5),\n    approximate_data_size=1\n)\n\nCfnOutput(self, \"LogGroupName\",\n    export_name=\"logGroupName,\",\n    value=custom.glue_job_log_group\n)","version":"2"},"csharp":{"source":"using Data.Generator.Custom.Dataset;\n\nvar app = new App();\nvar stack = new Stack(app, \"CustomDatasetStack\");\n\nvar custom = new CustomDataset(stack, \"CustomDataset\", new Struct {\n    S3Location = new Struct {\n        BucketName = \"aws-analytics-reference-architecture\",\n        ObjectKey = \"datasets/custom\"\n    },\n    InputFormat = CustomDatasetInputFormat.CSV,\n    DatetimeColumn = \"tpep_pickup_datetime\",\n    DatetimeColumnsToAdjust = new [] { \"tpep_pickup_datetime\" },\n    PartitionRange = Duration.Minutes(5),\n    ApproximateDataSize = 1\n});\n\nnew CfnOutput(this, \"LogGroupName\", new Struct {\n    ExportName = \"logGroupName,\",\n    Value = custom.GlueJobLogGroup\n});","version":"1"},"java":{"source":"import data.generator.custom.dataset.CustomDataset;\nimport data.generator.custom.dataset.CustomDatasetInputFormat;\n\nObject app = new App();\nObject stack = new Stack(app, \"CustomDatasetStack\");\n\nObject custom = CustomDataset.Builder.create(stack, \"CustomDataset\")\n        .s3Location(Map.of(\n                \"bucketName\", \"aws-analytics-reference-architecture\",\n                \"objectKey\", \"datasets/custom\"))\n        .inputFormat(CustomDatasetInputFormat.getCSV())\n        .datetimeColumn(\"tpep_pickup_datetime\")\n        .datetimeColumnsToAdjust(List.of(\"tpep_pickup_datetime\"))\n        .partitionRange(Duration.minutes(5))\n        .approximateDataSize(1)\n        .build();\n\nCfnOutput.Builder.create(this, \"LogGroupName\")\n        .exportName(\"logGroupName,\")\n        .value(custom.getGlueJobLogGroup())\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/datagenerator/customdataset\"\n\napp := NewApp()\nstack := NewStack(app, jsii.String(\"CustomDatasetStack\"))\n\ncustom := datageneratorcustomdataset.NewCustomDataset(stack, jsii.String(\"CustomDataset\"), map[string]interface{}{\n\t\"s3Location\": map[string]*string{\n\t\t\"bucketName\": jsii.String(\"aws-analytics-reference-architecture\"),\n\t\t\"objectKey\": jsii.String(\"datasets/custom\"),\n\t},\n\t\"inputFormat\": datageneratorcustomdataset.CustomDatasetInputFormat_CSV,\n\t\"datetimeColumn\": jsii.String(\"tpep_pickup_datetime\"),\n\t\"datetimeColumnsToAdjust\": []*string{\n\t\tjsii.String(\"tpep_pickup_datetime\"),\n\t},\n\t\"partitionRange\": Duration_minutes(jsii.Number(5)),\n\t\"approximateDataSize\": jsii.Number(1),\n})\n\nNewCfnOutput(this, jsii.String(\"LogGroupName\"), map[string]interface{}{\n\t\"exportName\": jsii.String(\"logGroupName,\"),\n\t\"value\": custom.glueJobLogGroup,\n})","version":"1"},"$":{"source":"import { CustomDataset, CustomDatasetInputFormat } from './data-generator/custom-dataset';\n\nconst app = new App();\nconst stack = new Stack(app, 'CustomDatasetStack');\n\nconst custom = new CustomDataset(stack, 'CustomDataset', {\n  s3Location: {\n    bucketName: 'aws-analytics-reference-architecture',\n    objectKey: 'datasets/custom',\n  },\n  inputFormat: CustomDatasetInputFormat.CSV,\n  datetimeColumn: 'tpep_pickup_datetime',\n  datetimeColumnsToAdjust: ['tpep_pickup_datetime'],\n  partitionRange: Duration.minutes(5),\n  approximateDataSize: 1,\n});\n\nnew CfnOutput(this, 'LogGroupName', {\n  exportName: 'logGroupName,\n  value: custom.glueJobLogGroup,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.CustomDataset"},"field":{"field":"markdown","line":16}},"didCompile":false,"fqnsReferenced":[],"fullSource":"import { CustomDataset, CustomDatasetInputFormat } from './data-generator/custom-dataset';\n\nconst app = new App();\nconst stack = new Stack(app, 'CustomDatasetStack');\n\nconst custom = new CustomDataset(stack, 'CustomDataset', {\n  s3Location: {\n    bucketName: 'aws-analytics-reference-architecture',\n    objectKey: 'datasets/custom',\n  },\n  inputFormat: CustomDatasetInputFormat.CSV,\n  datetimeColumn: 'tpep_pickup_datetime',\n  datetimeColumnsToAdjust: ['tpep_pickup_datetime'],\n  partitionRange: Duration.minutes(5),\n  approximateDataSize: 1,\n});\n\nnew CfnOutput(this, 'LogGroupName', {\n  exportName: 'logGroupName,\n  value: custom.glueJobLogGroup,\n});","syntaxKindCounter":{"9":2,"11":9,"80":27,"110":1,"208":1,"209":3,"210":3,"212":1,"213":4,"242":3,"243":1,"259":3,"260":3,"271":1,"272":1,"274":1,"275":2,"302":10,"311":1},"fqnsFingerprint":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"0ed4ec30875627a922554550ccca214a1c735e80877de0b0aebf463b31c18e04":{"translations":{"python":{"source":"from aws_cdk import App, Stack\nfrom aws_cdk.aws_iam import Role\nfrom aws_analytics_reference_architecture import DataDomain\n\nexample_app = App()\nstack = Stack(example_app, \"DataProductStack\")\n\nDataDomain(stack, \"myDataDomain\",\n    central_account_id=\"1234567891011\",\n    crawler_workflow=True,\n    domain_name=\"domainName\"\n)","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Amazon.CDK.AWS.IAM;\nusing Aws.Analytics.Reference.Architecture;\n\nvar exampleApp = new App();\nvar stack = new Stack(exampleApp, \"DataProductStack\");\n\nnew DataDomain(stack, \"myDataDomain\", new DataDomainProps {\n    CentralAccountId = \"1234567891011\",\n    CrawlerWorkflow = true,\n    DomainName = \"domainName\"\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.App;\nimport software.amazon.awscdk.Stack;\nimport software.amazon.awscdk.services.iam.Role;\nimport aws.analytics.reference.architecture.DataDomain;\n\nApp exampleApp = new App();\nStack stack = new Stack(exampleApp, \"DataProductStack\");\n\nDataDomain.Builder.create(stack, \"myDataDomain\")\n        .centralAccountId(\"1234567891011\")\n        .crawlerWorkflow(true)\n        .domainName(\"domainName\")\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws-samples/dummy/awsanalyticsreferencearchitecture\"\n\nexampleApp := awscdk.NewApp()\nstack := awscdk.NewStack(exampleApp, jsii.String(\"DataProductStack\"))\n\nawsanalyticsreferencearchitecture.NewDataDomain(stack, jsii.String(\"myDataDomain\"), &DataDomainProps{\n\tCentralAccountId: jsii.String(\"1234567891011\"),\n\tCrawlerWorkflow: jsii.Boolean(true),\n\tDomainName: jsii.String(\"domainName\"),\n})","version":"1"},"$":{"source":"import { App, Stack } from 'aws-cdk-lib';\nimport { Role } from 'aws-cdk-lib/aws-iam';\nimport { DataDomain } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new App();\nconst stack = new Stack(exampleApp, 'DataProductStack');\n\nnew DataDomain(stack, 'myDataDomain', {\n centralAccountId: '1234567891011',\n crawlerWorkflow: true,\n domainName: 'domainName'\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.DataDomain"},"field":{"field":"markdown","line":9}},"didCompile":true,"fqnsReferenced":["aws-analytics-reference-architecture.DataDomain","aws-analytics-reference-architecture.DataDomainProps","aws-cdk-lib.App","aws-cdk-lib.Stack","constructs.Construct"],"fullSource":"import { App, Stack } from 'aws-cdk-lib';\nimport { Role } from 'aws-cdk-lib/aws-iam';\nimport { DataDomain } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new App();\nconst stack = new Stack(exampleApp, 'DataProductStack');\n\nnew DataDomain(stack, 'myDataDomain', {\n centralAccountId: '1234567891011',\n crawlerWorkflow: true,\n domainName: 'domainName'\n});","syntaxKindCounter":{"11":7,"80":14,"112":1,"209":1,"213":3,"242":2,"243":1,"259":2,"260":2,"271":3,"272":3,"274":3,"275":4,"302":3,"311":1},"fqnsFingerprint":"519b442ea033b921675d4ea46f9e28ef2725f32e5d61a16e35120ea21b5ecd7c"},"889cf9f66375d50f817ae402723215eb5ecd7680f4be65217c33d4b33dfc1cda":{"translations":{"python":{"source":"import aws_cdk as cdk\nfrom aws_analytics_reference_architecture import DataLakeStorage\n\nexample_app = cdk.App()\nstack = cdk.Stack(example_app, \"DataLakeStorageStack\")\n\nDataLakeStorage(stack, \"MyDataLakeStorage\",\n    raw_infrequent_access_delay=90,\n    raw_archive_delay=180,\n    clean_infrequent_access_delay=180,\n    clean_archive_delay=360,\n    transform_infrequent_access_delay=180,\n    transform_archive_delay=360\n)","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Aws.Analytics.Reference.Architecture;\n\nvar exampleApp = new App();\nvar stack = new Stack(exampleApp, \"DataLakeStorageStack\");\n\nnew DataLakeStorage(stack, \"MyDataLakeStorage\", new DataLakeStorageProps {\n    RawInfrequentAccessDelay = 90,\n    RawArchiveDelay = 180,\n    CleanInfrequentAccessDelay = 180,\n    CleanArchiveDelay = 360,\n    TransformInfrequentAccessDelay = 180,\n    TransformArchiveDelay = 360\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.*;\nimport aws.analytics.reference.architecture.DataLakeStorage;\n\nApp exampleApp = new App();\nStack stack = new Stack(exampleApp, \"DataLakeStorageStack\");\n\nDataLakeStorage.Builder.create(stack, \"MyDataLakeStorage\")\n        .rawInfrequentAccessDelay(90)\n        .rawArchiveDelay(180)\n        .cleanInfrequentAccessDelay(180)\n        .cleanArchiveDelay(360)\n        .transformInfrequentAccessDelay(180)\n        .transformArchiveDelay(360)\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws-samples/dummy/awsanalyticsreferencearchitecture\"\n\nexampleApp := cdk.NewApp()\nstack := cdk.NewStack(exampleApp, jsii.String(\"DataLakeStorageStack\"))\n\nawsanalyticsreferencearchitecture.NewDataLakeStorage(stack, jsii.String(\"MyDataLakeStorage\"), &DataLakeStorageProps{\n\tRawInfrequentAccessDelay: jsii.Number(90),\n\tRawArchiveDelay: jsii.Number(180),\n\tCleanInfrequentAccessDelay: jsii.Number(180),\n\tCleanArchiveDelay: jsii.Number(360),\n\tTransformInfrequentAccessDelay: jsii.Number(180),\n\tTransformArchiveDelay: jsii.Number(360),\n})","version":"1"},"$":{"source":"import * as cdk from 'aws-cdk-lib';\nimport { DataLakeStorage } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new cdk.App();\nconst stack = new cdk.Stack(exampleApp, 'DataLakeStorageStack');\n\nnew DataLakeStorage(stack, 'MyDataLakeStorage', {\n rawInfrequentAccessDelay: 90,\n rawArchiveDelay: 180,\n cleanInfrequentAccessDelay: 180,\n cleanArchiveDelay: 360,\n transformInfrequentAccessDelay: 180,\n transformArchiveDelay: 360,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.DataLakeStorage"},"field":{"field":"markdown","line":19}},"didCompile":true,"fqnsReferenced":["aws-analytics-reference-architecture.DataLakeStorage","aws-analytics-reference-architecture.DataLakeStorageProps","aws-cdk-lib.App","aws-cdk-lib.Stack","constructs.Construct"],"fullSource":"import * as cdk from 'aws-cdk-lib';\nimport { DataLakeStorage } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new cdk.App();\nconst stack = new cdk.Stack(exampleApp, 'DataLakeStorageStack');\n\nnew DataLakeStorage(stack, 'MyDataLakeStorage', {\n rawInfrequentAccessDelay: 90,\n rawArchiveDelay: 180,\n cleanInfrequentAccessDelay: 180,\n cleanArchiveDelay: 360,\n transformInfrequentAccessDelay: 180,\n transformArchiveDelay: 360,\n});","syntaxKindCounter":{"9":6,"11":4,"80":17,"209":1,"210":2,"213":3,"242":2,"243":1,"259":2,"260":2,"271":2,"272":2,"273":1,"274":1,"275":1,"302":6,"311":1},"fqnsFingerprint":"1f9458ea2e9e86fe476dea01f0c9055bc8318ddb233b79a64625316c5187f3de"},"6b26c3e6bc4cfcb7012cd075496ae839b1e56bd6cf0f3fa68b3bd1c986a75c8d":{"translations":{"python":{"source":"emr_eks = EmrEksCluster.get_or_create(stack,\n    eks_admin_role_arn=<ROLE_ARN>,\n    eks_cluster_name=<CLUSTER_NAME>\n)\n\nvirtual_cluster = emr_eks.add_emr_virtual_cluster(stack, {\n    \"name\": <Virtual_Cluster_Name>,\n    \"create_namespace\": <TRUE OR, \"FALSE\": FALSE\n} > , eks_namespace, <K8S_namespace>)\n\nrole = emr_eks.create_execution_role(stack, \"ExecRole\",\n    policy=<POLICY>\n)\n\n# EMR on EKS virtual cluster ID\ncdk.CfnOutput(self, \"VirtualClusterId\", value = virtual_cluster.attr_id)\n# Job config for each nodegroup\ncdk.CfnOutput(self, \"CriticalConfig\", value = emr_eks.critical_default_config)\ncdk.CfnOutput(self, \"SharedConfig\", value = emr_eks.shared_default_config)\n# Execution role arn\ncdk.CfnOutput(self, \"ExecRoleArn\", value = role.role_arn)","version":"2"},"csharp":{"source":"var emrEks = EmrEksCluster.GetOrCreate(stack, new Struct {\n    EksAdminRoleArn = <ROLE_ARN>,\n    EksClusterName = <CLUSTER_NAME>\n});\n\nvar virtualCluster = emrEks.AddEmrVirtualCluster(stack, new Struct {\n    Name = <Virtual_Cluster_Name>,\n    CreateNamespace = <TRUE OR, FALSE = FALSE\n} > , eksNamespace, <K8S_namespace>);\n\nvar role = emrEks.CreateExecutionRole(stack, \"ExecRole\", new Struct {\n    Policy = <POLICY>\n});\n\n// EMR on EKS virtual cluster ID\ncdk.CfnOutput(self, \"VirtualClusterId\", value = virtualCluster.Attr_id);\n// Job config for each nodegroup\ncdk.CfnOutput(self, \"CriticalConfig\", value = emrEks.CriticalDefaultConfig);\ncdk.CfnOutput(self, \"SharedConfig\", value = emrEks.SharedDefaultConfig);\n// Execution role arn\ncdk.CfnOutput(self, \"ExecRoleArn\", value = role.RoleArn);","version":"1"},"java":{"source":"EmrEksCluster emrEks = EmrEksCluster.getOrCreate(stack, Map.of(\n        \"eksAdminRoleArn\", <ROLE_ARN>,\n        \"eksClusterName\", <CLUSTER_NAME>));\n\nObject virtualCluster = emrEks.addEmrVirtualCluster(stack, Map.of(\n        \"name\", <Virtual_Cluster_Name>,\n        \"createNamespace\", <TRUE OR, \"FALSE\", FALSE) > , eksNamespace, <K8S_namespace>);\n\nObject role = emrEks.createExecutionRole(stack, \"ExecRole\", Map.of(\n        \"policy\", <POLICY>));\n\n// EMR on EKS virtual cluster ID\ncdk.CfnOutput(self, \"VirtualClusterId\", value = virtualCluster.getAttr_id());\n// Job config for each nodegroup\ncdk.CfnOutput(self, \"CriticalConfig\", value = emrEks.getCriticalDefaultConfig());\ncdk.CfnOutput(self, \"SharedConfig\", value = emrEks.getSharedDefaultConfig());\n// Execution role arn\ncdk.CfnOutput(self, \"ExecRoleArn\", value = role.getRoleArn());","version":"1"},"go":{"source":"emrEks := emrEksCluster_GetOrCreate(stack, map[string]interface{}{\n\t\"eksAdminRoleArn\": <ROLE_ARN>,\n\t\"eksClusterName\": <CLUSTER_NAME>,\n})\n\nvirtualCluster := emrEks.addEmrVirtualCluster(stack, map[string]interface{}{\n\t\"name\": <Virtual_Cluster_Name>,\n\t\"createNamespace\": <TRUE OR,\n\t\"FALSE\": FALSE,\n} > , eksNamespace, <K8S_namespace>)\n\nrole := emrEks.createExecutionRole(stack, jsii.String(\"ExecRole\"), map[string]interface{}{\n\t\"policy\": <POLICY>,\n})\n\n// EMR on EKS virtual cluster ID\ncdk.cfnOutput(self, jsii.String(\"VirtualClusterId\"), value = virtualCluster.attr_id)\n// Job config for each nodegroup\ncdk.cfnOutput(self, jsii.String(\"CriticalConfig\"), value = emrEks.criticalDefaultConfig)\ncdk.cfnOutput(self, jsii.String(\"SharedConfig\"), value = emrEks.sharedDefaultConfig)\n// Execution role arn\ncdk.cfnOutput(self, jsii.String(\"ExecRoleArn\"), value = role.roleArn)","version":"1"},"$":{"source":"const emrEks: EmrEksCluster = EmrEksCluster.getOrCreate(stack, {\n  eksAdminRoleArn: <ROLE_ARN>,\n  eksClusterName: <CLUSTER_NAME>,\n});\n\nconst virtualCluster = emrEks.addEmrVirtualCluster(stack, {\n  name: <Virtual_Cluster_Name>,\n  createNamespace: <TRUE OR FALSE>,\n  eksNamespace: <K8S_namespace>,\n});\n\nconst role = emrEks.createExecutionRole(stack, 'ExecRole',{\n  policy: <POLICY>,\n})\n\n// EMR on EKS virtual cluster ID\ncdk.CfnOutput(self, 'VirtualClusterId',value = virtualCluster.attr_id)\n// Job config for each nodegroup\ncdk.CfnOutput(self, \"CriticalConfig\", value = emrEks.criticalDefaultConfig)\ncdk.CfnOutput(self, \"SharedConfig\", value = emrEks.sharedDefaultConfig)\n// Execution role arn\ncdk.CfnOutput(self,'ExecRoleArn', value = role.roleArn)","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.EmrEksCluster"},"field":{"field":"markdown","line":14}},"didCompile":false,"fqnsReferenced":[],"fullSource":"const emrEks: EmrEksCluster = EmrEksCluster.getOrCreate(stack, {\n  eksAdminRoleArn: <ROLE_ARN>,\n  eksClusterName: <CLUSTER_NAME>,\n});\n\nconst virtualCluster = emrEks.addEmrVirtualCluster(stack, {\n  name: <Virtual_Cluster_Name>,\n  createNamespace: <TRUE OR FALSE>,\n  eksNamespace: <K8S_namespace>,\n});\n\nconst role = emrEks.createExecutionRole(stack, 'ExecRole',{\n  policy: <POLICY>,\n})\n\n// EMR on EKS virtual cluster ID\ncdk.CfnOutput(self, 'VirtualClusterId',value = virtualCluster.attr_id)\n// Job config for each nodegroup\ncdk.CfnOutput(self, \"CriticalConfig\", value = emrEks.criticalDefaultConfig)\ncdk.CfnOutput(self, \"SharedConfig\", value = emrEks.sharedDefaultConfig)\n// Execution role arn\ncdk.CfnOutput(self,'ExecRoleArn', value = role.roleArn)","syntaxKindCounter":{"11":5,"32":1,"64":4,"80":57,"182":7,"209":3,"210":11,"212":7,"215":6,"225":5,"241":1,"242":3,"243":4,"259":3,"260":3,"302":5,"303":1,"311":1},"fqnsFingerprint":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"43b1545fce62b9c722f958150343dc62071dfb8e46d7edb163cc74e4512505f3":{"translations":{"python":{"source":"app = App()\n\naccount = process.env.CDK_DEFAULT_ACCOUNT\nregion = process.env.CDK_DEFAULT_REGION\n\nstack = Stack(app, \"EmrEksImageBuilderStack\",\n    env={\"account\": account, \"region\": region}\n)\n\npublish = EmrEksImageBuilder(stack, \"EmrEksImageBuilder\",\n    repository_name=\"my-repo\",\n    ecr_removal_policy=RemovalPolicy.RETAIN\n)\n\npublish.publish_image(\"PATH-TO-DOCKER-FILE-FOLDER\", \"v4\")","version":"2"},"csharp":{"source":"var app = new App();\n\nvar account = process.Env.CDK_DEFAULT_ACCOUNT;\nvar region = process.Env.CDK_DEFAULT_REGION;\n\nvar stack = new Stack(app, \"EmrEksImageBuilderStack\", new Struct {\n    Env = new Struct { Account = account, Region = region }\n});\n\nvar publish = new EmrEksImageBuilder(stack, \"EmrEksImageBuilder\", new Struct {\n    RepositoryName = \"my-repo\",\n    EcrRemovalPolicy = RemovalPolicy.RETAIN\n});\n\npublish.PublishImage(\"PATH-TO-DOCKER-FILE-FOLDER\", \"v4\");","version":"1"},"java":{"source":"Object app = new App();\n\nObject account = process.getEnv().getCDK_DEFAULT_ACCOUNT();\nObject region = process.getEnv().getCDK_DEFAULT_REGION();\n\nObject stack = Stack.Builder.create(app, \"EmrEksImageBuilderStack\")\n        .env(Map.of(\"account\", account, \"region\", region))\n        .build();\n\nObject publish = EmrEksImageBuilder.Builder.create(stack, \"EmrEksImageBuilder\")\n        .repositoryName(\"my-repo\")\n        .ecrRemovalPolicy(RemovalPolicy.getRETAIN())\n        .build();\n\npublish.publishImage(\"PATH-TO-DOCKER-FILE-FOLDER\", \"v4\");","version":"1"},"go":{"source":"app := NewApp()\n\naccount := process.env.cDK_DEFAULT_ACCOUNT\nregion := process.env.cDK_DEFAULT_REGION\n\nstack := NewStack(app, jsii.String(\"EmrEksImageBuilderStack\"), map[string]map[string]interface{}{\n\t\"env\": map[string]interface{}{\n\t\t\"account\": account,\n\t\t\"region\": region,\n\t},\n})\n\npublish := NewEmrEksImageBuilder(stack, jsii.String(\"EmrEksImageBuilder\"), map[string]interface{}{\n\t\"repositoryName\": jsii.String(\"my-repo\"),\n\t\"ecrRemovalPolicy\": RemovalPolicy_RETAIN,\n})\n\npublish.publishImage(jsii.String(\"PATH-TO-DOCKER-FILE-FOLDER\"), jsii.String(\"v4\"))","version":"1"},"$":{"source":"\nconst app = new App();\n  \nconst account = process.env.CDK_DEFAULT_ACCOUNT;\nconst region = process.env.CDK_DEFAULT_REGION;\n\nconst stack = new Stack(app, 'EmrEksImageBuilderStack', {\nenv: { account: account, region: region },\n});\n\nconst publish = new EmrEksImageBuilder(stack, 'EmrEksImageBuilder', {\n repositoryName: 'my-repo',\n ecrRemovalPolicy: RemovalPolicy.RETAIN\n});\n\npublish.publishImage('PATH-TO-DOCKER-FILE-FOLDER', 'v4');","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.EmrEksImageBuilder"},"field":{"field":"markdown","line":9}},"didCompile":false,"fqnsReferenced":[],"fullSource":"\nconst app = new App();\n  \nconst account = process.env.CDK_DEFAULT_ACCOUNT;\nconst region = process.env.CDK_DEFAULT_REGION;\n\nconst stack = new Stack(app, 'EmrEksImageBuilderStack', {\nenv: { account: account, region: region },\n});\n\nconst publish = new EmrEksImageBuilder(stack, 'EmrEksImageBuilder', {\n repositoryName: 'my-repo',\n ecrRemovalPolicy: RemovalPolicy.RETAIN\n});\n\npublish.publishImage('PATH-TO-DOCKER-FILE-FOLDER', 'v4');","syntaxKindCounter":{"11":5,"80":27,"209":3,"210":6,"212":1,"213":3,"242":5,"243":1,"259":5,"260":5,"302":5,"311":1},"fqnsFingerprint":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"cad3b4aeb7028697832d0f1a144521ac4d88da4d7fac1dcbf9e033bf3a3c8d91":{"translations":{"python":{"source":"import path as path\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_redshift_alpha as redshift\nimport aws_cdk as cdk\n\nfrom aws_analytics_reference_architecture import FlywayRunner\n\ninteg_test_app = cdk.App()\nstack = cdk.Stack(integ_test_app, \"fywayRunnerTest\")\n\nvpc = ec2.Vpc(stack, \"Vpc\")\n\ndb_name = \"testdb\"\ncluster = redshift.Cluster(stack, \"Redshift\",\n    removal_policy=cdk.RemovalPolicy.DESTROY,\n    master_user=redshift.Login(\n        master_username=\"admin\"\n    ),\n    vpc=vpc,\n    default_database_name=db_name\n)\n\nFlywayRunner(stack, \"testMigration\",\n    migration_scripts_folder_absolute_path=path.join(__dirname, \"./resources/sql\"),\n    cluster=cluster,\n    vpc=vpc,\n    database_name=db_name\n)","version":"2"},"csharp":{"source":"using Path;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.Redshift.Alpha;\nusing Amazon.CDK;\n\nusing Aws.Analytics.Reference.Architecture;\n\nvar integTestApp = new App();\nvar stack = new Stack(integTestApp, \"fywayRunnerTest\");\n\nvar vpc = new Vpc(stack, \"Vpc\");\n\nvar dbName = \"testdb\";\nvar cluster = new Cluster(stack, \"Redshift\", new ClusterProps {\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    MasterUser = new Login {\n        MasterUsername = \"admin\"\n    },\n    Vpc = vpc,\n    DefaultDatabaseName = dbName\n});\n\nnew FlywayRunner(stack, \"testMigration\", new FlywayRunnerProps {\n    MigrationScriptsFolderAbsolutePath = Join(__dirname, \"./resources/sql\"),\n    Cluster = cluster,\n    Vpc = vpc,\n    DatabaseName = dbName\n});","version":"1"},"java":{"source":"import path.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.redshift.alpha.*;\nimport software.amazon.awscdk.*;\n\nimport aws.analytics.reference.architecture.FlywayRunner;\n\nApp integTestApp = new App();\nStack stack = new Stack(integTestApp, \"fywayRunnerTest\");\n\nVpc vpc = new Vpc(stack, \"Vpc\");\n\nString dbName = \"testdb\";\nCluster cluster = Cluster.Builder.create(stack, \"Redshift\")\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .masterUser(Login.builder()\n                .masterUsername(\"admin\")\n                .build())\n        .vpc(vpc)\n        .defaultDatabaseName(dbName)\n        .build();\n\nFlywayRunner.Builder.create(stack, \"testMigration\")\n        .migrationScriptsFolderAbsolutePath(join(__dirname, \"./resources/sql\"))\n        .cluster(cluster)\n        .vpc(vpc)\n        .databaseName(dbName)\n        .build();","version":"1"},"go":{"source":"import path \"github.com/aws-samples/dummy/path\"\nimport ec2 \"github.com/aws/aws-cdk-go/awscdk\"\nimport redshift \"github.com/aws/aws-cdk-go/awscdkredshiftalpha\"\nimport \"github.com/aws/aws-cdk-go/awscdk\"\n\nimport \"github.com/aws-samples/dummy/awsanalyticsreferencearchitecture\"\n\nintegTestApp := cdk.NewApp()\nstack := cdk.NewStack(integTestApp, jsii.String(\"fywayRunnerTest\"))\n\nvpc := ec2.NewVpc(stack, jsii.String(\"Vpc\"))\n\ndbName := \"testdb\"\ncluster := redshift.NewCluster(stack, jsii.String(\"Redshift\"), &ClusterProps{\n\tRemovalPolicy: cdk.RemovalPolicy_DESTROY,\n\tMasterUser: &Login{\n\t\tMasterUsername: jsii.String(\"admin\"),\n\t},\n\tVpc: Vpc,\n\tDefaultDatabaseName: dbName,\n})\n\nawsanalyticsreferencearchitecture.NewFlywayRunner(stack, jsii.String(\"testMigration\"), &FlywayRunnerProps{\n\tMigrationScriptsFolderAbsolutePath: path.join(__dirname, jsii.String(\"./resources/sql\")),\n\tCluster: cluster,\n\tVpc: vpc,\n\tDatabaseName: dbName,\n})","version":"1"},"$":{"source":"import * as path from 'path';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as redshift from '@aws-cdk/aws-redshift-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\nimport { FlywayRunner } from 'aws-analytics-reference-architecture';\n\nconst integTestApp = new cdk.App();\nconst stack = new cdk.Stack(integTestApp, 'fywayRunnerTest');\n\nconst vpc = new ec2.Vpc(stack, 'Vpc');\n\nconst dbName = 'testdb';\nconst cluster = new redshift.Cluster(stack, 'Redshift', {\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  masterUser: {\n    masterUsername: 'admin',\n  },\n  vpc,\n  defaultDatabaseName: dbName,\n});\n\nnew FlywayRunner(stack, 'testMigration', {\n  migrationScriptsFolderAbsolutePath: path.join(__dirname, './resources/sql'),\n  cluster: cluster,\n  vpc: vpc,\n  databaseName: dbName,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.FlywayRunner"},"field":{"field":"markdown","line":7}},"didCompile":false,"fqnsReferenced":["@aws-cdk/aws-redshift-alpha.Cluster","@aws-cdk/aws-redshift-alpha.ClusterProps","@aws-cdk/aws-redshift-alpha.Login","aws-analytics-reference-architecture.FlywayRunner","aws-analytics-reference-architecture.FlywayRunnerProps","aws-cdk-lib.App","aws-cdk-lib.RemovalPolicy","aws-cdk-lib.RemovalPolicy#DESTROY","aws-cdk-lib.Stack","aws-cdk-lib.aws_ec2.IVpc","aws-cdk-lib.aws_ec2.Vpc","constructs.Construct"],"fullSource":"import * as path from 'path';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as redshift from '@aws-cdk/aws-redshift-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\nimport { FlywayRunner } from 'aws-analytics-reference-architecture';\n\nconst integTestApp = new cdk.App();\nconst stack = new cdk.Stack(integTestApp, 'fywayRunnerTest');\n\nconst vpc = new ec2.Vpc(stack, 'Vpc');\n\nconst dbName = 'testdb';\nconst cluster = new redshift.Cluster(stack, 'Redshift', {\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  masterUser: {\n    masterUsername: 'admin',\n  },\n  vpc,\n  defaultDatabaseName: dbName,\n});\n\nnew FlywayRunner(stack, 'testMigration', {\n  migrationScriptsFolderAbsolutePath: path.join(__dirname, './resources/sql'),\n  cluster: cluster,\n  vpc: vpc,\n  databaseName: dbName,\n});","syntaxKindCounter":{"11":12,"80":42,"209":3,"210":7,"212":1,"213":5,"242":5,"243":1,"259":5,"260":5,"271":5,"272":5,"273":4,"274":1,"275":1,"302":8,"303":1,"311":1},"fqnsFingerprint":"d4a4577fd3b841e6c664c700e260c235facae6076551ea97b48c419da091b0ac"},"d8e0e9d45835f252ce536935e610bd39a5e0f356bb81995680bc7d33f2636073":{"translations":{"python":{"source":"replace_dictionary = {\n    \"TABLE_NAME\": \"my_table\"\n}","version":"2"},"csharp":{"source":"replaceDictionary = new Struct {\n    TABLE_NAME = \"my_table\"\n};","version":"1"},"java":{"source":"replaceDictionary = Map.of(\n        \"TABLE_NAME\", \"my_table\");","version":"1"},"go":{"source":"replaceDictionary = map[string]*string{\n\t\"TABLE_NAME\": jsii.String(\"my_table\"),\n}","version":"1"},"$":{"source":"replaceDictionary = {\n  TABLE_NAME: 'my_table'\n}","version":"0"}},"location":{"api":{"api":"member","fqn":"aws-analytics-reference-architecture.FlywayRunnerProps","memberName":"replaceDictionary"},"field":{"field":"markdown","line":10}},"didCompile":false,"fqnsReferenced":[],"fullSource":"replaceDictionary = {\n  TABLE_NAME: 'my_table'\n}","syntaxKindCounter":{"11":1,"64":1,"80":2,"209":1,"225":1,"243":1,"302":1,"311":1},"fqnsFingerprint":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"3184a386a67c0b10d7042e66b11a877f4874bdf8593057fa6a327677c41b8a8c":{"translations":{"python":{"source":"import aws_cdk as cdk\nfrom aws_analytics_reference_architecture import LakeformationS3Location\n\nexample_app = cdk.App()\nstack = cdk.Stack(example_app, \"LakeformationS3LocationStack\")\n\nmy_key = Key(stack, \"MyKey\")\nmy_bucket = Bucket(stack, \"MyBucket\",\n    encryption_key=my_key\n)\n\nLakeFormationS3Location(stack, \"MyLakeformationS3Location\",\n    s3_location={\n        \"bucket_name\": my_bucket.bucket_name,\n        \"object_key\": \"my-prefix\"\n    },\n    kms_key_id=my_bucket.encryption_key.key_id\n)","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Aws.Analytics.Reference.Architecture;\n\nvar exampleApp = new App();\nvar stack = new Stack(exampleApp, \"LakeformationS3LocationStack\");\n\nvar myKey = new Key(stack, \"MyKey\");\nvar myBucket = new Bucket(stack, \"MyBucket\", new Struct {\n    EncryptionKey = myKey\n});\n\nnew LakeFormationS3Location(stack, \"MyLakeformationS3Location\", new Struct {\n    S3Location = new Struct {\n        BucketName = myBucket.BucketName,\n        ObjectKey = \"my-prefix\"\n    },\n    KmsKeyId = myBucket.EncryptionKey.KeyId\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.*;\nimport aws.analytics.reference.architecture.LakeformationS3Location;\n\nApp exampleApp = new App();\nStack stack = new Stack(exampleApp, \"LakeformationS3LocationStack\");\n\nObject myKey = new Key(stack, \"MyKey\");\nObject myBucket = Bucket.Builder.create(stack, \"MyBucket\")\n        .encryptionKey(myKey)\n        .build();\n\nLakeFormationS3Location.Builder.create(stack, \"MyLakeformationS3Location\")\n        .s3Location(Map.of(\n                \"bucketName\", myBucket.getBucketName(),\n                \"objectKey\", \"my-prefix\"))\n        .kmsKeyId(myBucket.getEncryptionKey().getKeyId())\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws-samples/dummy/awsanalyticsreferencearchitecture\"\n\nexampleApp := cdk.NewApp()\nstack := cdk.NewStack(exampleApp, jsii.String(\"LakeformationS3LocationStack\"))\n\nmyKey := NewKey(stack, jsii.String(\"MyKey\"))\nmyBucket := NewBucket(stack, jsii.String(\"MyBucket\"), map[string]interface{}{\n\t\"encryptionKey\": myKey,\n})\n\nNewLakeFormationS3Location(stack, jsii.String(\"MyLakeformationS3Location\"), map[string]interface{}{\n\t\"s3Location\": map[string]interface{}{\n\t\t\"bucketName\": myBucket.bucketName,\n\t\t\"objectKey\": jsii.String(\"my-prefix\"),\n\t},\n\t\"kmsKeyId\": myBucket.encryptionKey.keyId,\n})","version":"1"},"$":{"source":"import * as cdk from 'aws-cdk-lib';\nimport { LakeformationS3Location } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new cdk.App();\nconst stack = new cdk.Stack(exampleApp, 'LakeformationS3LocationStack');\n\nconst myKey = new Key(stack, 'MyKey')\nconst myBucket = new Bucket(stack, 'MyBucket', {\n  encryptionKey: myKey,\n})\n\nnew LakeFormationS3Location(stack, 'MyLakeformationS3Location', {\n  s3Location: {\n    bucketName: myBucket.bucketName,\n    objectKey: 'my-prefix',\n  },\n  kmsKeyId: myBucket.encryptionKey.keyId,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.LakeFormationS3Location"},"field":{"field":"markdown","line":14}},"didCompile":false,"fqnsReferenced":["aws-cdk-lib.App","aws-cdk-lib.Stack","constructs.Construct"],"fullSource":"import * as cdk from 'aws-cdk-lib';\nimport { LakeformationS3Location } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new cdk.App();\nconst stack = new cdk.Stack(exampleApp, 'LakeformationS3LocationStack');\n\nconst myKey = new Key(stack, 'MyKey')\nconst myBucket = new Bucket(stack, 'MyBucket', {\n  encryptionKey: myKey,\n})\n\nnew LakeFormationS3Location(stack, 'MyLakeformationS3Location', {\n  s3Location: {\n    bucketName: myBucket.bucketName,\n    objectKey: 'my-prefix',\n  },\n  kmsKeyId: myBucket.encryptionKey.keyId,\n});","syntaxKindCounter":{"11":7,"80":28,"209":3,"210":5,"213":5,"242":4,"243":1,"259":4,"260":4,"271":2,"272":2,"273":1,"274":1,"275":1,"302":5,"311":1},"fqnsFingerprint":"94ecdac20ea46c519af30f635e5188b7cb062c6949e90a3245a8c758e8cb6d8b"},"06bd9a3a1e1b30d39e747f5a388846df4dc80c7591e713b28a5cbf51a149fda5":{"translations":{"python":{"source":"emr_eks = EmrEksCluster.get_or_create(stack,\n    eks_admin_role_arn=\"arn:aws:iam::012345678912:role/Admin-Admin\",\n    eks_cluster_name=\"cluster\"\n)\n\nnotebook_platform = NotebookPlatform(stack, \"platform-notebook\",\n    emr_eks=emr_eks,\n    eks_namespace=\"platformns\",\n    studio_name=\"platform\",\n    studio_auth_mode=StudioAuthMode.SSO\n)\n\n# If the S3 bucket is encrypted, add policy to the key for the role\npolicy1 = ManagedPolicy(stack, \"MyPolicy1\",\n    statements=[\n        PolicyStatement(\n            resources=<BUCKET ARN(s) > ,\n            actions=[\"s3:*\"]\n        ),\n        PolicyStatement(\n            resources=[\n                stack.format_arn(\n                    account=Aws.ACCOUNT_ID,\n                    region=Aws.REGION,\n                    service=\"logs\",\n                    resource=\"*\",\n                    arn_format=ArnFormat.NO_RESOURCE_NAME\n                )\n            ],\n            actions=[\"logs:*\"\n            ]\n        )\n    ]\n)\n\nnotebook_platform.add_user([\n    identity_name=\"user1\",\n    identity_type=SSOIdentityType.USER,\n    notebook_managed_endpoints=[{\n        \"emr_on_eks_version\": EmrVersion.V6_9,\n        \"execution_policy\": policy1\n    }]\n])","version":"2"},"csharp":{"source":"var emrEks = EmrEksCluster.GetOrCreate(stack, new Struct {\n    EksAdminRoleArn = \"arn:aws:iam::012345678912:role/Admin-Admin\",\n    EksClusterName = \"cluster\"\n});\n\nvar notebookPlatform = new NotebookPlatform(stack, \"platform-notebook\", new Struct {\n    EmrEks = emrEks,\n    EksNamespace = \"platformns\",\n    StudioName = \"platform\",\n    StudioAuthMode = StudioAuthMode.SSO\n});\n\n// If the S3 bucket is encrypted, add policy to the key for the role\nvar policy1 = new ManagedPolicy(stack, \"MyPolicy1\", new Struct {\n    Statements = new [] {\n        new PolicyStatement(new Struct {\n            Resources = <BUCKET ARN(s) > ,\n            Actions = new [] { \"s3:*\" }\n        }),\n        new PolicyStatement(new Struct {\n            Resources = new [] { stack.FormatArn(new Struct {\n                Account = Aws.ACCOUNT_ID,\n                Region = Aws.REGION,\n                Service = \"logs\",\n                Resource = \"*\",\n                ArnFormat = ArnFormat.NO_RESOURCE_NAME\n            }) },\n            Actions = new [] { \"logs:*\" }\n        }) }\n});\n\nnotebookPlatform.AddUser(new [] { new Struct {\n    IdentityName = \"user1\",\n    IdentityType = SSOIdentityType.USER,\n    NotebookManagedEndpoints = new [] { new Struct {\n        EmrOnEksVersion = EmrVersion.V6_9,\n        ExecutionPolicy = policy1\n    } }\n} });","version":"1"},"java":{"source":"Object emrEks = EmrEksCluster.getOrCreate(stack, Map.of(\n        \"eksAdminRoleArn\", \"arn:aws:iam::012345678912:role/Admin-Admin\",\n        \"eksClusterName\", \"cluster\"));\n\nObject notebookPlatform = NotebookPlatform.Builder.create(stack, \"platform-notebook\")\n        .emrEks(emrEks)\n        .eksNamespace(\"platformns\")\n        .studioName(\"platform\")\n        .studioAuthMode(StudioAuthMode.getSSO())\n        .build();\n\n// If the S3 bucket is encrypted, add policy to the key for the role\nObject policy1 = ManagedPolicy.Builder.create(stack, \"MyPolicy1\")\n        .statements(List.of(\n            PolicyStatement.Builder.create()\n                    .resources(<BUCKET ARN(s) > )\n                    .actions(List.of(\"s3:*\"))\n                    .build(),\n            PolicyStatement.Builder.create()\n                    .resources(List.of(stack.formatArn(Map.of(\n                            \"account\", Aws.getACCOUNT_ID(),\n                            \"region\", Aws.getREGION(),\n                            \"service\", \"logs\",\n                            \"resource\", \"*\",\n                            \"arnFormat\", ArnFormat.getNO_RESOURCE_NAME()))))\n                    .actions(List.of(\"logs:*\"))\n                    .build()))\n        .build();\n\nnotebookPlatform.addUser(List.of(Map.of(\n        \"identityName\", \"user1\",\n        \"identityType\", SSOIdentityType.getUSER(),\n        \"notebookManagedEndpoints\", List.of(Map.of(\n                \"emrOnEksVersion\", EmrVersion.getV6_9(),\n                \"executionPolicy\", policy1)))));","version":"1"},"go":{"source":"emrEks := emrEksCluster_GetOrCreate(stack, map[string]*string{\n\t\"eksAdminRoleArn\": jsii.String(\"arn:aws:iam::012345678912:role/Admin-Admin\"),\n\t\"eksClusterName\": jsii.String(\"cluster\"),\n})\n\nnotebookPlatform := NewNotebookPlatform(stack, jsii.String(\"platform-notebook\"), map[string]interface{}{\n\t\"emrEks\": emrEks,\n\t\"eksNamespace\": jsii.String(\"platformns\"),\n\t\"studioName\": jsii.String(\"platform\"),\n\t\"studioAuthMode\": StudioAuthMode_SSO,\n})\n\n// If the S3 bucket is encrypted, add policy to the key for the role\npolicy1 := NewManagedPolicy(stack, jsii.String(\"MyPolicy1\"), map[string][]interface{}{\n\t\"statements\": []interface{}{\n\t\tNewPolicyStatement(map[string]interface{}{\n\t\t\t\"resources\": jsii.Boolean(<BUCKET ARN(s) > ),\n\t\t\t\"actions\": []*string{\n\t\t\t\tjsii.String(\"s3:*\"),\n\t\t\t},\n\t\t}),\n\t\tNewPolicyStatement(map[string][]interface{}{\n\t\t\t\"resources\": []interface{}{\n\t\t\t\tstack.formatArn(map[string]interface{}{\n\t\t\t\t\t\"account\": Aws_ACCOUNT_ID,\n\t\t\t\t\t\"region\": Aws_REGION,\n\t\t\t\t\t\"service\": jsii.String(\"logs\"),\n\t\t\t\t\t\"resource\": jsii.String(\"*\"),\n\t\t\t\t\t\"arnFormat\": ArnFormat_NO_RESOURCE_NAME,\n\t\t\t\t}),\n\t\t\t},\n\t\t\t\"actions\": []*string{\n\t\t\t\tjsii.String(\"logs:*\"),\n\t\t\t},\n\t\t}),\n\t},\n})\n\nnotebookPlatform.addUser([]interface{}{\n\tmap[string]interface{}{\n\t\t\"identityName\": jsii.String(\"user1\"),\n\t\t\"identityType\": SSOIdentityType_USER,\n\t\t\"notebookManagedEndpoints\": []map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"emrOnEksVersion\": EmrVersion_V6_9,\n\t\t\t\t\"executionPolicy\": policy1,\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"const emrEks = EmrEksCluster.getOrCreate(stack, {\n  eksAdminRoleArn: 'arn:aws:iam::012345678912:role/Admin-Admin',\n  eksClusterName: 'cluster',\n});\n\nconst notebookPlatform = new NotebookPlatform(stack, 'platform-notebook', {\n  emrEks: emrEks,\n  eksNamespace: 'platformns',\n  studioName: 'platform',\n  studioAuthMode: StudioAuthMode.SSO,\n});\n\n// If the S3 bucket is encrypted, add policy to the key for the role\nconst policy1 = new ManagedPolicy(stack, 'MyPolicy1', {\n  statements: [\n    new PolicyStatement({\n      resources: <BUCKET ARN(s)>,\n      actions: ['s3:*'],\n    }),\n    new PolicyStatement({\n      resources: [\n        stack.formatArn({\n          account: Aws.ACCOUNT_ID,\n          region: Aws.REGION,\n          service: 'logs',\n          resource: '*',\n          arnFormat: ArnFormat.NO_RESOURCE_NAME,\n        }),\n      ],\n      actions: [\n        'logs:*',\n      ],\n    }),\n  ],\n});\n\nnotebookPlatform.addUser([{\n  identityName: 'user1',\n  identityType: SSOIdentityType.USER,\n  notebookManagedEndpoints: [{\n    emrOnEksVersion: EmrVersion.V6_9,\n    executionPolicy: policy1,\n  }],\n}]);","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.NotebookPlatform"},"field":{"field":"markdown","line":19}},"didCompile":false,"fqnsReferenced":[],"fullSource":"const emrEks = EmrEksCluster.getOrCreate(stack, {\n  eksAdminRoleArn: 'arn:aws:iam::012345678912:role/Admin-Admin',\n  eksClusterName: 'cluster',\n});\n\nconst notebookPlatform = new NotebookPlatform(stack, 'platform-notebook', {\n  emrEks: emrEks,\n  eksNamespace: 'platformns',\n  studioName: 'platform',\n  studioAuthMode: StudioAuthMode.SSO,\n});\n\n// If the S3 bucket is encrypted, add policy to the key for the role\nconst policy1 = new ManagedPolicy(stack, 'MyPolicy1', {\n  statements: [\n    new PolicyStatement({\n      resources: <BUCKET ARN(s)>,\n      actions: ['s3:*'],\n    }),\n    new PolicyStatement({\n      resources: [\n        stack.formatArn({\n          account: Aws.ACCOUNT_ID,\n          region: Aws.REGION,\n          service: 'logs',\n          resource: '*',\n          arnFormat: ArnFormat.NO_RESOURCE_NAME,\n        }),\n      ],\n      actions: [\n        'logs:*',\n      ],\n    }),\n  ],\n});\n\nnotebookPlatform.addUser([{\n  identityName: 'user1',\n  identityType: SSOIdentityType.USER,\n  notebookManagedEndpoints: [{\n    emrOnEksVersion: EmrVersion.V6_9,\n    executionPolicy: policy1,\n  }],\n}]);","syntaxKindCounter":{"11":11,"32":1,"80":55,"182":1,"208":6,"209":8,"210":9,"212":4,"213":4,"215":1,"225":1,"242":3,"243":1,"259":3,"260":3,"302":21,"311":1},"fqnsFingerprint":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},"236ae419e55068fc80ff4dc0b8eedb9f2b88c98a99d5057eacd67aee43cc7eff":{"translations":{"python":{"source":"import aws_cdk as cdk\nfrom aws_analytics_reference_architecture import S3CrossAccount\n\nexample_app = cdk.App()\nstack = cdk.Stack(example_app, \"S3CrossAccountStack\")\n\nmy_bucket = Bucket(stack, \"MyBucket\")\n\nS3CrossAccount(stack, \"S3CrossAccountGrant\",\n    bucket=my_bucket,\n    s3_object_key=\"my-data\",\n    account_id=\"1234567891011\"\n)","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Aws.Analytics.Reference.Architecture;\n\nvar exampleApp = new App();\nvar stack = new Stack(exampleApp, \"S3CrossAccountStack\");\n\nvar myBucket = new Bucket(stack, \"MyBucket\");\n\nnew S3CrossAccount(stack, \"S3CrossAccountGrant\", new S3CrossAccountProps {\n    Bucket = myBucket,\n    S3ObjectKey = \"my-data\",\n    AccountId = \"1234567891011\"\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.*;\nimport aws.analytics.reference.architecture.S3CrossAccount;\n\nApp exampleApp = new App();\nStack stack = new Stack(exampleApp, \"S3CrossAccountStack\");\n\nObject myBucket = new Bucket(stack, \"MyBucket\");\n\nS3CrossAccount.Builder.create(stack, \"S3CrossAccountGrant\")\n        .bucket(myBucket)\n        .s3ObjectKey(\"my-data\")\n        .accountId(\"1234567891011\")\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws/aws-cdk-go/awscdk\"\nimport \"github.com/aws-samples/dummy/awsanalyticsreferencearchitecture\"\n\nexampleApp := cdk.NewApp()\nstack := cdk.NewStack(exampleApp, jsii.String(\"S3CrossAccountStack\"))\n\nmyBucket := NewBucket(stack, jsii.String(\"MyBucket\"))\n\nawsanalyticsreferencearchitecture.NewS3CrossAccount(stack, jsii.String(\"S3CrossAccountGrant\"), &S3CrossAccountProps{\n\tBucket: myBucket,\n\tS3ObjectKey: jsii.String(\"my-data\"),\n\tAccountId: jsii.String(\"1234567891011\"),\n})","version":"1"},"$":{"source":"import * as cdk from 'aws-cdk-lib';\nimport { S3CrossAccount } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new cdk.App();\nconst stack = new cdk.Stack(exampleApp, 'S3CrossAccountStack');\n\nconst myBucket = new Bucket(stack, 'MyBucket')\n\nnew S3CrossAccount(stack, 'S3CrossAccountGrant', {\n  bucket: myBucket,\n  s3ObjectKey: 'my-data',\n  accountId: '1234567891011',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"aws-analytics-reference-architecture.S3CrossAccount"},"field":{"field":"markdown","line":8}},"didCompile":false,"fqnsReferenced":["aws-analytics-reference-architecture.S3CrossAccount","aws-analytics-reference-architecture.S3CrossAccountProps","aws-cdk-lib.App","aws-cdk-lib.Stack","constructs.Construct"],"fullSource":"import * as cdk from 'aws-cdk-lib';\nimport { S3CrossAccount } from 'aws-analytics-reference-architecture';\n\nconst exampleApp = new cdk.App();\nconst stack = new cdk.Stack(exampleApp, 'S3CrossAccountStack');\n\nconst myBucket = new Bucket(stack, 'MyBucket')\n\nnew S3CrossAccount(stack, 'S3CrossAccountGrant', {\n  bucket: myBucket,\n  s3ObjectKey: 'my-data',\n  accountId: '1234567891011',\n});","syntaxKindCounter":{"11":7,"80":18,"209":1,"210":2,"213":4,"242":3,"243":1,"259":3,"260":3,"271":2,"272":2,"273":1,"274":1,"275":1,"302":3,"311":1},"fqnsFingerprint":"76967a26c245dca617868bf9a71e05ba20ba064dda5c90455ce0a642c9b70ce1"}}}